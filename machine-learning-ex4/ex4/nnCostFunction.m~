function [J grad] = nnCostFunction(nn_params, ...
                                   input_layer_size, ...
                                   hidden_layer_size, ...
                                   num_labels, ...
                                   X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%

X = [ones(m,1) X];  % adding bias

z2 = sigmoid(Theta1 * X');
a2 = [ones(m,1) z2'];

h_theta = sigmoid(Theta2 * a2'); %or a3 o rthe activation (output value) of the k-th output unit
 
yk = zeros(num_labels, m);  % num_labels= 10 is the total number of possible labels

%for the purpose of training a neural network, we need to recode the labels [1,2,3..} 
%as vectors containing only values 0 or 1

for i=1:m
  yk(y(i),i)=1;
end

J = (1/m) * sum(sum((-yk) .* log(h_theta) - (1 - yk) .* log(1-h_theta))); %cost function as on course


% Part 1b: Implement regularization with the cost function and gradients.


%you should not be regularizing the terms that correspond to the bias.
t1 = Theta1(:,2:size(Theta1,2));  %drop first (bias)
t2 = Theta2(:,2:size(Theta2,2)); %drop first (bias)

Reg = lambda  * (sum(sum (t1.^ 2)) + sum(sum(t2.^ 2))) / (2 * m);
J = J + Reg; %add the cost for the regularization terms.


% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%



% backprop
%Given a training example (x(t); y(t)), we will rst run a \forward pass" to compute
%all the activations throughout the network, including the output value of the
%hypothesis h(x). Then, for each node j in layer l, we would like to compute
%an \error term" (delta_j_l) j that measures how much that node was \responsible" for any errors in our output.

for t=1:m  %loop trhough examples
    
    %set input values for t-th example
    a1 = X(t,:); 
    a1 = a1'; %redundent but to be consistent with notation
    
    %feedforward
	z2 = Theta1 * a1;
	a2 = sigmoid(z2);
	a2 = [1 ; a2]; %add bias unit
	z3 = Theta2 * a2;
	a3 = sigmoid(z3);
	z2=[1; z2]; %add bias unit
    
	delta_3 = a3 - yk(:,t);  %diff between output activation and target 0 or 1
	delta_2 = (Theta2' * delta_3) .* sigmoidGradient(z2);
	delta_2 = delta_2(2:end); %remove first bias unit
	Theta2_grad = Theta2_grad + delta_3 * a2';
	Theta1_grad = Theta1_grad + delta_2 * a1';

end

%Once you have computed the gradient, you will be able
%to train the neural network by minimizing the cost function J() using an
%advanced optimizer such as fmincg.





% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
